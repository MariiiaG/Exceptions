Урок 2. Исключения и их обработка

ArithmeticException // Арифметическая ошибка
ArrayIndexOutOfВoundsException // Выход индекса за пределы массива
ClassCastException // Неверное приведение типов
IllegalArgumentException // Употребление недопустимого аргумента при вызове метода
IndexOutOfВoundsException // Выход индекса некоторого типа за допустимые пределы
NullPointerException // Обращение к несуществующему объекту
NumberFormatException // Неверное преобразование символьной строки в числовой формат
IOException // Ошибка при работе с потоками ввода/вывода
FileNotFoundException // Файл не найден
ClassNotFoundException // Класс не найден
UnsupportedOperationException // Попытка выполнения нереализованного метода

Exception наследуется от типа Throwable, что указывает на возможность «бросания» исключений.
Второй веткой от Throwable идёт класс Error и его подклассы. Посмотрим, в чём их отличие.
Исключения (Exception) можно перехватить, обработать, после чего приложение продолжит свою работу в штатном режиме.
Если же в процессе работы возникла и была брошена ошибка (Error), это указывает на ошибку в JVM и приводит
к аварийному завершению работы приложения.
Чтобы стало понятно, почему Error — это совсем нехорошая ситуация, разберём небольшой пример.
Как вы знаете, JVM не имеет права без причины удалять из кучи объекты, если на этот объект есть ссылка в коде.
Посмотрим, что произойдёт, если вы создадите массив строк и в каждую такую строку закинете содержимое файла в 100 мб.
Если массив будет иметь достаточную длину, то скоро места в куче не останется, и перед JVM возникнет выбор:

1. Удалить какую-то из существующих строк, чтобы освободить место в куче для создания новой большой строки.
2. Занеимениемместауронитьприложение.
JVM выберет второй путь.

Почему первый вариант не решение проблемы?
Если JVM станет без причины удалять объекты, вы никогда не будете уверены, что ваше приложение работает как задумано.
Потому что на ровном месте можно получить NullPointerException, где его быть никак не должно.
В результате будет выброшена ошибка OutOfMemoryError, обозначающая, что в куче больше нет места,
и его никак нельзя высвободить. Затем работа приложения прекратится, и в консоль выведется сообщение об ошибке.
Подведём промежуточный итог по разнице Exception и Error:
1. Exception — это ошибка, которую можно «на лету» перехватит и исправить.
2. Error—этокритическая(непоправимая)ошибка,которуюневозможно обработать, и которая приведёт к завершению работы JVM.

Все исключения делятся на две группы:
1. Checked: класс Exception и его подклассы — исключения, которые вы обязаны обработать в собственном коде.
Если этого не сделать, возникнет ошибка на этапе компиляции.
2. Unchecked: класс RuntimeException и его подклассы — исключения, охватывающие такие ситуации, как деление на ноль
или ошибочная индексация массивов. Их можно обрабатывать, если есть вероятность возникновения.
А можно и не обрабатывать, поскольку предполагается, что при правильном поведении программы такие исключения
вовсе не должны возникать. Действительно, если массив состоит из 8 элементов, код не должен обращаться к десятому.
Или при любом целочисленном делении надо проверять делитель.

Обработка исключений
С Error разработчик ничего не должен делать, так как он не может контролировать их появление.
А Exception, напротив, нужны, чтобы программист мог контролировать их появление.
Для этого есть понятие «Обработка исключений». Обработка исключений производится одним из двух способов:
1. Поместить код,бросающий исключение,в блокtry-catch.
2. Пробросить исключение методу на уровень выше, то есть методу, который вызывает текущий метод.
Для этого используется ключевое слово throws.
3. [плохойпуть]Вообщенеобрабатыватьисключение.Но в таком случае ваш код либо не скомпилируется,
либо будет работать крайне нестабильно.


Что мы можем сделать, чтобы программа не упала?
Воспользоваться try-catch.
Try-catch — это стандартный обработчик исключений Java, который удобен для отладки.
Но, как правило, обрабатывать исключения приходится вручную, так как это позволяет исправить возникшую ошибку
и предотвратить прерывание выполнения программы. Для этого достаточно разместить контролируемый код
в блоке оператора try, за которым должен следовать блок оператора catch, с указанием типа перехватываемого исключения.

- try - попытка выполнить код, в котором потенциально может возникнуть исключение
- catch - перехват исключения указанного типа (или его наследника) с целью обработать возникшую ошибочную ситуацию
(см lec2_5)

Оператор finally. При возникновении исключения часть кода может оказаться невыполненной.
Если исключение произошло в блоке try, то строки кода после возникновения исключения не будут выполнены,
а управление передается блоку catch. Это может привести к проблемам.
Например, когда файл открывается в начале метода и закрывается в конце, может возникнуть проблема с закрытием файла,
если в этом методе возникнет исключение. Для таких непредвиденных обстоятельств и служит оператор finally.
Оператор finally образует блок кода, который выполняется по завершении блока операторов try/catch,
но перед следующим за ним кодом. Он выполняется независимо от того, было ли сгенерировано исключение или нет,
было ли оно перехвачено блоком catch или нет. Это удобно для закрытия файловых дескрипторов либо
для освобождения других ресурсов, которые были выделены в начале метода и должны быть освобождены
перед возвратом из него. Блок finally необязателен, но каждому оператору try требуется хотя бы один
оператор catch или finally. Ниже приводится общая форма блока обработки исключений.
(cм lec2_7)